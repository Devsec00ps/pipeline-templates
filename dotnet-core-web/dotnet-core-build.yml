parameters:
  buildConfiguration: 'Release'
  nugetFeed: ''
  services: []

jobs:
- ${{ each s in parameters.services }}:

  - job:
    displayName: build ${{ s.name }}
    variables:
      # Use the latest reportgenerator for code coverage
      disable.coverage.autogenerate: 'true'
    pool:
      vmImage: '${{ s.vmImage }}'

    steps:

    - checkout: ${{ s.repo }}

    - ${{ each p in s.NpmPackages }}:
      # Determine if we need to use a custom feed or not
      - ${{ if eq(p.customFeed, '') }}:
        - task: Npm@1
          inputs:
            command: 'install'
            workingDir: '${{ p.name }}'
            customRegistry: 'useNpmrc'

      - ${{ if ne(p.customFeed, '') }}:
        - task: Npm@1
          inputs:
            command: 'install'
            workingDir: '${{ p.name }}'
            customRegistry: 'useFeed'
            customFeed: '${{ p.customFeed }}'

      - task: Yarn@3
        inputs:
          projectDirectory: '${{ p.name }}'

      - script: | 
          npm run lint; exit 0
          npm run stylelint; exit 0
        displayName: 'npm run lint'
        workingDirectory: '${{ p.name }}'

    # - task: VersionAssemblies@2
    #   inputs:
    #     sourcePath: '$(Build.SourcesDirectory)'
    #     filePattern: '**/AssemblyInfo.*'
    #     versionSource: 'buildNumber'
    #     versionFormat: 'fourParts'
    #     replaceVersionFormat: 'fourParts'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: 'restore'
        projects: '${{ s.projectFile }}'
        vstsFeed: '${{ parameters.nugetFeed }}'

    #Added extra properties to fix coverage not being detected from sonaqube
    - ${{ each sonar in s.sonarQube }}:
      - task: SonarQubePrepare@4
        displayName: 'Prepare analysis on SonarQube'
        condition: and(succeeded(), eq('${{ sonar.runSonarQube }}', 'true'))
        inputs:
          SonarQube: SonarQube
          scannerMode: 'MSBuild'
          projectKey: ${{ sonar.sonarProjectKey }}
          projectName: ${{ sonar.sonarProjectName }}
          extraProperties: |
            sonar.coverageReportPaths=$(Agent.TempDirectory)/SonarQube.xml

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: 'build'
        projects: '${{ s.projectFile }}'
        arguments: '--configuration ${{ parameters.buildConfiguration }} /p:Version=$(build.buildnumber)'

    - ${{ if eq(s.runYarnTests, 'true') }}:
      - ${{ each p in s.NpmPackages }}:
        - task: Yarn@3
          inputs:
            projectDirectory: '${{ p.name }}'
            arguments: 'test'

    # - task: Yarn@3
    #   inputs:
    #     projectDirectory: 'Client'
    #     arguments: 'test:coverage'

    - ${{ if eq(s.runDotNetCoreTests, 'true') }}:
      # Run tests - ensure `coverlet.msbuild` nuget package is added on each test project for code coverage
      # This should run on windows+ubuntu
      # If only cared about windows and were okay with downloading a .coverage file instead of inline results, remove the /p: arguments and just used '--collect "Code coverage"'
      # Sept 22 20: updated code coverage to be less flaky - old: /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura' . See: https://github.com/coverlet-coverage/coverlet/blob/master/Documentation/KnownIssues.md#1-vstest-stops-process-execution-earlydotnet-test
      - task: DotNetCoreCLI@2
        displayName: 'dotnet test'
        inputs:
          command: test
          projects: '**/*[Tt]ests/*.csproj'
          publishTestResults: true
          arguments: '--collect:"XPlat Code Coverage"'

      # Run the report generator for just the app
      - task: reportgenerator@4
        inputs:
          reports: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml;$(Pipeline.Workspace)/**/Cobertura.xml;$(Agent.WorkFolder)/**/coverage.cobertura.xml'
          targetdir: '$(Build.ArtifactStagingDirectory)/CoverageResults'
      #
      
      # Download all CoverageResults for all pipeline jobs
      - download: 'current'
        patterns: '**/CoverageResults/**'

      - task: reportgenerator@4
        inputs:
          reports: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml;$(Pipeline.Workspace)/**/Cobertura.xml;$(Agent.WorkFolder)/**/coverage.cobertura.xml'
          targetdir: '$(Pipeline.Workspace)/CoverageResults'
        
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage report'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Pipeline.Workspace)/CoverageResults/Cobertura.xml'
          reportDirectory: '$(Pipeline.Workspace)/CoverageResults'
      
      - task: reportgenerator@4
        displayName: 'Converting coverage file to sonarqube format'
        inputs:
          reports: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml;$(Pipeline.Workspace)/**/Cobertura.xml;$(Agent.WorkFolder)/**/coverage.cobertura.xml'
          targetdir: '$(Agent.TempDirectory)'
          reporttypes: 'SonarQube'


    - ${{ each sonar in s.sonarQube }}:
      - task: SonarQubeAnalyze@4
        displayName: 'Run Code Analysis'
        condition: and(succeeded(), eq('${{ sonar.runSonarQube }}', 'true'))

      - task: SonarQubePublish@4
        displayName: 'Publish Quality Gate Result'
        condition: and(succeeded(), eq('${{ sonar.runSonarQube }}', 'true'))
        inputs:
          pollingTimeoutSec: '300'
    
    # Only publish web projects by default
    # - ${{ if ne(s.publishWebProjects, 'false') }}:
    #   - task: DotNetCoreCLI@2
    #     displayName: 'dotnet publish'
    #     inputs:
    #       command: 'publish'
    #       publishWebProjects: true
    #       zipAfterPublish: true
    #       arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(build.artifactstagingdirectory)'

    # # Allow us to specify if we need to publish non web projects (ie: functions)
    # - ${{ if eq(s.publishWebProjects, 'false') }}:
    #   - task: DotNetCoreCLI@2
    #     displayName: 'dotnet publish'
    #     inputs:
    #       command: 'publish'
    #       publishWebProjects: ${{ s.publishWebProjects }}
    #       projects: '${{ s.projectFile }}'
    #       zipAfterPublish: true
    #       arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(build.artifactstagingdirectory)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '${{ s.projectFile }}'
        zipAfterPublish: true
        arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(build.artifactstagingdirectory) /p:Version=$(build.buildnumber)'

    # Rename build artifact, if necessary
    - powershell: |
        if (Test-Path "$(build.artifactstagingdirectory)/s.zip" -PathType leaf) {
          write-host "renaming build artifact"
          rename-item "$(build.artifactstagingdirectory)/s.zip" $(build.artifactstagingdirectory)/${{ s.name }}.zip
        }
        else {
          write-host "artifact name okay, not renaming"
        }
      displayName: 'Rename build artifact zip'

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: ${{ s.name }}
