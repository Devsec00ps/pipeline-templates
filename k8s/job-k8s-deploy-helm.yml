parameters:
  # replace tokens
  appEnvironmentName: ''
  imageRepository: ''
  #containerRegistry: ''
  tag: '$(Build.BuildId)'
  imagePullSecret: ''
  varGroup: ''
  # deployment endpoints
  dockerRegistryServiceConnection: ''
  kubernetesServiceConnection: ''
  environment: ''
  services: []
  namespace: ''
  #
  helmVersion: '3.0.3'
  pool: 
    vmImage: 'ubuntu-latest'
    
    
jobs:

- deployment: Deploy
  condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
  displayName: Deploy

  pool: ${{ parameters.pool }}

  environment: ${{ parameters.environment }}

  #variable group to be used in replace tokens
  variables:
  - group: ${{ parameters.varGroup }}
  #These variables are used to replace the tokens in '**/values.release.yaml'
  #When deploying multiple services, may have to put this inside the loop to replace tokens more correctly.

  strategy:
    runOnce:
      deploy:
        steps:
        - task: HelmInstaller@1
          inputs:
            helmVersionToInstall: ${{ parameters.helmVersion }}

        - task: KubernetesManifest@0
          displayName: Create imagePullSecret
          inputs:
            action: createSecret
            secretName: ${{ parameters.imagePullSecret }}
            namespace: ${{ parameters.namespace }}
            dockerRegistryEndpoint: ${{ parameters.dockerRegistryServiceConnection }}
            kubernetesServiceConnection: ${{ parameters.kubernetesServiceConnection }}

        - task: 9240b5c1-a1b2-4799-9325-e071c63236fb@1
          displayName: Replace tokens in release.yaml
          inputs:
            sourcePath: '$(Pipeline.Workspace)'
            filePattern: '**/values.release.yaml'
            tokenRegex: '__(\w+)__'

        # Helm deploy - deploy the service if skip = false
        - ${{ each s in parameters.services }}:
          - ${{ if eq(s.skip, 'false') }}:

            - task: HelmDeploy@0
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceConnection: ${{ parameters.kubernetesServiceConnection }}
                namespace: '${{ parameters.namespace }}'
                command: 'upgrade'
                chartType: 'FilePath'
                chartPath: '$(Pipeline.Workspace)/charts-${{ s.serviceName }}'
                releaseName: '${{ s.serviceName }}'
                overrideValues: '${{ s.overrides }}'
                valueFile: '$(Pipeline.Workspace)/charts-${{ s.serviceName }}/values.release.yaml'